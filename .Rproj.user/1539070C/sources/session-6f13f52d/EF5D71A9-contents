---
title: "Homeplay Week 4 - ERGM 1"
author: "Samir Sabitli"
format:
  html:
    embed-resources: true
    self-contained-math: true
editor: visual
toc: true
toc-title: Document Contents
---

## Install Packages

```{r}
remotes::install_github("jason-morgan/ina", dependencies = TRUE)
```

## Load the Dataset

```{r}
Hookups <- ina::Hookups
```

## Explore the Network

```{r}
class(Hookups)
Hookups
snafun::g_summary(Hookups)
```

```{r}
verts <- snafun::extract_all_vertex_attributes(Hookups)
lapply(verts, class)
```

```{r}
sapply(verts, summary)
```

## Hypotheses

The book formulates the following hypotheses

-   Some individuals will have more hookups than others -\> Some will have higher degree than others

-   Hookups form triangles

-   Homophily with respect to the attributes that they are attracted to in romantic relationships

## Model Formulation

### Exogenous Focus

```{r}
full_model <- ergm::ergm(Hookups ~ edges + 
                           absdiff("birthyear") + 
                           nodecov("birthyear") +
                           nodematch("position") +
                           nodematch("race") +
                           nodematch("sex") +
                           nodecov("season"))

summary(full_model)
```

### Endogenous Focus

```{r}
set.seed(510)
full_model <- ergm::ergm(Hookups ~ edges + 
                           absdiff("birthyear") + 
                           nodecov("birthyear") +
                           nodematch("position") +
                           nodematch("race") +
                           nodematch("sex") +
                           nodecov("season") +
                           degree(1) +
                           gwdsp(1, fixed=TRUE), 
                         control= ergm::control.ergm(MCMC.samplesize=5000,
                                              MCMC.burnin=5000,
                                              MCMLE.maxit=10))

summary(full_model)
```

### Nested Models

```{r}
m1 <- ergm::ergm(Hookups ~ edges + 
                           absdiff("birthyear") + 
                           nodecov("birthyear") +
                           nodematch("position") +
                           nodematch("race") +
                           nodematch("sex") +
                           nodecov("season"))

m2 <- ergm::ergm(Hookups ~ edges + 
                           absdiff("birthyear") + 
                           nodecov("birthyear") +
                           nodematch("position") +
                           nodematch("race") +
                           nodematch("sex") +
                           nodecov("season") +
                           degree(1), 
                         control= ergm::control.ergm(MCMC.samplesize=5000,
                                              MCMC.burnin=5000,
                                              MCMLE.maxit=10))

m3 <- ergm::ergm(Hookups ~ edges + 
                           absdiff("birthyear") + 
                           nodecov("birthyear") +
                           nodematch("position") +
                           nodematch("race") +
                           nodematch("sex") +
                           nodecov("season") +
                           degree(1) +
                           gwdsp(1, fixed=TRUE), 
                         control= ergm::control.ergm(MCMC.samplesize=5000,
                                              MCMC.burnin=5000,
                                              MCMLE.maxit=10))
```

```{r}
models <- list(m1, m2, m3)
texreg::screenreg(models)
```

```{r}
exp(m1$coefficients)
```

```{r}
exp(m2$coefficients)
```

```{r}
exp(m3$coefficients)
```

-   Here, we can see that Model 2 performs better than Model 3, speaking strictly on AIC/BIC.

-   All of the attributes such as birth year, position, race, sex, and season are derived from vertices and not from the network itself, inherently. This makes them all exogenous variables

-   

## Notes on ERGM Models from the Book

-   `absdiff()` simulates the vertex level attribute being an edge level one. If the same variable were available as an edge attribute then you could just use `edgecov()`

-   To simulate numeric attributes with vertex level attribute you can use `nodecov()`

-   Homophily is the tendency for similar actions based on similar groupings. Think of groups that could behave similarly

-   You can test homophily directly with `nodematch()` with vertex level attributes. It can test if the effect is of the same type

-   With `nodematch` you will have negative effects if the behaviour is different across the same dimension and positive if they are similar.

-   There are different types of endogenous variables:

    -   Vertex-based, dyad-based, and higher order

-   k-star is a vertex-based endogenous variable type

    -   When undirected, this means preferential attachment -\> vertices with more connected tend to get even more connections

    -   Positive coefficient with 2-star is associated with preferential attachment

-   One-star is equivalent to edge term in ERGM

-   In-star = popularity, and out-star = sociality

-   In curved ERGM you use geometrically weighted degree counts instead of stars

-   All star based measures centered around focal node

-   Most prominent higher order endogenous effect is a triangle

-   In curved ERGM you do not use triangles but geometrically weighted edgewise shared partners (GWESP) and non-partners

![](images/clipboard-3812802156.png){width="399"}
